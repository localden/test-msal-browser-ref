### YamlMime:TSType
name: ClientApplication
uid: '@azure/msal-browser.ClientApplication'
package: '@azure/msal-browser'
summary: ''
fullName: ClientApplication
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ClientApplication(Configuration)
    uid: '@azure/msal-browser.ClientApplication.constructor'
    package: '@azure/msal-browser'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ClientApplication(configuration: Configuration)'
      parameters:
        - id: configuration
          type: <xref uid="@azure/msal-browser.Configuration" />
          description: Object for the MSAL PublicClientApplication instance
methods:
  - name: acquireTokenByCode(AuthorizationCodeRequest)
    uid: '@azure/msal-browser.ClientApplication.acquireTokenByCode'
    package: '@azure/msal-browser'
    summary: >-
      This function redeems an authorization code (passed as code) from the eSTS
      token endpoint.

      This authorization code should be acquired server-side using a
      confidential client to acquire a spa_code.

      This API is not indended for normal authorization code acquisition and
      redemption.


      Redemption of this authorization code will not require PKCE, as it was
      acquired by a confidential client.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenByCode(request: AuthorizationCodeRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.AuthorizationCodeRequest" />
          description: <xref:@azure/msal-browser.AuthorizationCodeRequest>
      return:
        description: >-
          A promise that is fulfilled when this function has completed, or
          rejected if an error was raised.
        type: Promise&lt;AuthenticationResult&gt;
  - name: acquireTokenPopup(PopupRequest)
    uid: '@azure/msal-browser.ClientApplication.acquireTokenPopup'
    package: '@azure/msal-browser'
    summary: >-
      Use when you want to obtain an access_token for your API via opening a
      popup window in the user's browser
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function acquireTokenPopup(request: PopupRequest):
        Promise<AuthenticationResult>
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.PopupRequest" />
          description: ''
      return:
        description: >-
          A promise that is fulfilled when this function has completed, or
          rejected if an error was raised.
        type: Promise&lt;AuthenticationResult&gt;
  - name: acquireTokenRedirect(RedirectRequest)
    uid: '@azure/msal-browser.ClientApplication.acquireTokenRedirect'
    package: '@azure/msal-browser'
    summary: >-
      Use when you want to obtain an access_token for your API by redirecting
      the user's browser window to the authorization endpoint. This function
      redirects

      the page, so any code that follows this function will not execute.


      IMPORTANT: It is NOT recommended to have code that is dependent on the
      resolution of the Promise. This function will navigate away from the
      current

      browser window. It currently returns a Promise in order to reflect the
      asynchronous nature of the code running in this function.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function acquireTokenRedirect(request: RedirectRequest): Promise<void>'
      parameters:
        - id: request
          type: <xref uid="@azure/msal-browser.RedirectRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: addEventCallback(EventCallbackFunction)
    uid: '@azure/msal-browser.ClientApplication.addEventCallback'
    package: '@azure/msal-browser'
    summary: Adds event callbacks to array
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addEventCallback(callback: EventCallbackFunction): null |
        string
      parameters:
        - id: callback
          type: <xref uid="@azure/msal-browser.EventCallbackFunction" />
          description: ''
      return:
        description: ''
        type: null | string
  - name: addPerformanceCallback(PerformanceCallbackFunction)
    uid: '@azure/msal-browser.ClientApplication.addPerformanceCallback'
    package: '@azure/msal-browser'
    summary: Registers a callback to receive performance events.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addPerformanceCallback(callback: PerformanceCallbackFunction):
        string
      parameters:
        - id: callback
          type: PerformanceCallbackFunction
          description: ''
      return:
        description: ''
        type: string
  - name: disableAccountStorageEvents()
    uid: '@azure/msal-browser.ClientApplication.disableAccountStorageEvents'
    package: '@azure/msal-browser'
    summary: >-
      Removes event listener that emits an event when a user account is added or
      removed from localstorage in a different browser tab or window
    remarks: ''
    isDeprecated: false
    syntax:
      content: function disableAccountStorageEvents()
  - name: enableAccountStorageEvents()
    uid: '@azure/msal-browser.ClientApplication.enableAccountStorageEvents'
    package: '@azure/msal-browser'
    summary: >-
      Adds event listener that emits an event when a user account is added or
      removed from localstorage in a different browser tab or window
    remarks: ''
    isDeprecated: false
    syntax:
      content: function enableAccountStorageEvents()
  - name: getAccountByHomeId(string)
    uid: '@azure/msal-browser.ClientApplication.getAccountByHomeId'
    package: '@azure/msal-browser'
    summary: |-
      Returns the signed in account matching homeAccountId.
      (the account object is created at the time of successful login)
      or null when no matching account is found
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAccountByHomeId(homeAccountId: string): any'
      parameters:
        - id: homeAccountId
          type: string
          description: ''
      return:
        description: The account object stored in MSAL
        type: any
  - name: getAccountByLocalId(string)
    uid: '@azure/msal-browser.ClientApplication.getAccountByLocalId'
    package: '@azure/msal-browser'
    summary: |-
      Returns the signed in account matching localAccountId.
      (the account object is created at the time of successful login)
      or null when no matching account is found
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAccountByLocalId(localAccountId: string): any'
      parameters:
        - id: localAccountId
          type: string
          description: ''
      return:
        description: The account object stored in MSAL
        type: any
  - name: getAccountByUsername(string)
    uid: '@azure/msal-browser.ClientApplication.getAccountByUsername'
    package: '@azure/msal-browser'
    summary: >-
      Returns the signed in account matching username.

      (the account object is created at the time of successful login)

      or null when no matching account is found.

      This API is provided for convenience but getAccountById should be used for
      best reliability
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAccountByUsername(userName: string): any'
      parameters:
        - id: userName
          type: string
          description: ''
      return:
        description: The account object stored in MSAL
        type: any
  - name: getActiveAccount()
    uid: '@azure/msal-browser.ClientApplication.getActiveAccount'
    package: '@azure/msal-browser'
    summary: Gets the currently active account
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getActiveAccount(): any'
      return:
        description: ''
        type: any
  - name: getAllAccounts()
    uid: '@azure/msal-browser.ClientApplication.getAllAccounts'
    package: '@azure/msal-browser'
    summary: |-
      Returns all accounts that MSAL currently has data for.
      (the account object is created at the time of successful login)
      or empty array when no accounts are found
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAllAccounts(): AccountInfo[]'
      return:
        description: Array of account objects in cache
        type: AccountInfo[]
  - name: getConfiguration()
    uid: '@azure/msal-browser.ClientApplication.getConfiguration'
    package: '@azure/msal-browser'
    summary: Returns the configuration object
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getConfiguration(): BrowserConfiguration'
      return:
        description: ''
        type: <xref uid="@azure/msal-browser.BrowserConfiguration" />
  - name: getLogger()
    uid: '@azure/msal-browser.ClientApplication.getLogger'
    package: '@azure/msal-browser'
    summary: Returns the logger instance
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getLogger(): Logger'
      return:
        description: ''
        type: Logger
  - name: getTokenCache()
    uid: '@azure/msal-browser.ClientApplication.getTokenCache'
    package: '@azure/msal-browser'
    summary: Gets the token cache for the application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getTokenCache(): ITokenCache'
      return:
        description: ''
        type: <xref uid="@azure/msal-browser.ITokenCache" />
  - name: handleRedirectPromise(string)
    uid: '@azure/msal-browser.ClientApplication.handleRedirectPromise'
    package: '@azure/msal-browser'
    summary: >-
      Event handler function which allows users to fire events after the
      PublicClientApplication object

      has loaded during redirect flows. This should be invoked on all page loads
      involved in redirect

      auth flows.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function handleRedirectPromise(hash?: string): Promise<any>'
      parameters:
        - id: hash
          type: string
          description: >-
            Hash to process. Defaults to the current value of
            window.location.hash. Only needs to be provided explicitly if the
            response to be handled is not contained in the current value.
      return:
        description: >-
          Token response or null. If the return value is null, then no auth
          redirect was detected.
        type: Promise&lt;any&gt;
  - name: initialize()
    uid: '@azure/msal-browser.ClientApplication.initialize'
    package: '@azure/msal-browser'
    summary: >-
      Initializer function to perform async startup tasks such as connecting to
      WAM extension
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initialize(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: initializeWrapperLibrary(WrapperSKU, string)
    uid: '@azure/msal-browser.ClientApplication.initializeWrapperLibrary'
    package: '@azure/msal-browser'
    summary: >-
      Called by wrapper libraries (Angular & React) to set SKU and Version
      passed down to telemetry, logger, etc.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function initializeWrapperLibrary(sku: WrapperSKU, version: string)'
      parameters:
        - id: sku
          type: <xref uid="@azure/msal-browser.WrapperSKU" />
          description: ''
        - id: version
          type: string
          description: ''
  - name: logout(EndSessionRequest)
    uid: '@azure/msal-browser.ClientApplication.logout'
    package: '@azure/msal-browser'
    summary: Deprecated logout function. Use logoutRedirect or logoutPopup instead
    remarks: ''
    isDeprecated: true
    customDeprecatedMessage: ''
    syntax:
      content: 'function logout(logoutRequest?: EndSessionRequest): Promise<void>'
      parameters:
        - id: logoutRequest
          type: <xref uid="@azure/msal-browser.EndSessionRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: logoutPopup(EndSessionPopupRequest)
    uid: '@azure/msal-browser.ClientApplication.logoutPopup'
    package: '@azure/msal-browser'
    summary: >-
      Clears local cache for the current user then opens a popup window
      prompting the user to sign-out of the server
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function logoutPopup(logoutRequest?: EndSessionPopupRequest):
        Promise<void>
      parameters:
        - id: logoutRequest
          type: <xref uid="@azure/msal-browser.EndSessionPopupRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: logoutRedirect(EndSessionRequest)
    uid: '@azure/msal-browser.ClientApplication.logoutRedirect'
    package: '@azure/msal-browser'
    summary: >-
      Use to log out the current user, and redirect the user to the
      postLogoutRedirectUri.

      Default behaviour is to redirect the user to `window.location.href`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function logoutRedirect(logoutRequest?: EndSessionRequest):
        Promise<void>
      parameters:
        - id: logoutRequest
          type: <xref uid="@azure/msal-browser.EndSessionRequest" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: removeEventCallback(string)
    uid: '@azure/msal-browser.ClientApplication.removeEventCallback'
    package: '@azure/msal-browser'
    summary: Removes callback with provided id from callback array
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeEventCallback(callbackId: string)'
      parameters:
        - id: callbackId
          type: string
          description: ''
  - name: removePerformanceCallback(string)
    uid: '@azure/msal-browser.ClientApplication.removePerformanceCallback'
    package: '@azure/msal-browser'
    summary: Removes a callback registered with addPerformanceCallback.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removePerformanceCallback(callbackId: string): boolean'
      parameters:
        - id: callbackId
          type: string
          description: ''
      return:
        description: ''
        type: boolean
  - name: setActiveAccount(any)
    uid: '@azure/msal-browser.ClientApplication.setActiveAccount'
    package: '@azure/msal-browser'
    summary: >-
      Sets the account to use as the active account. If no account is passed to
      the acquireToken APIs, then MSAL will use this active account.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setActiveAccount(account: any)'
      parameters:
        - id: account
          type: any
          description: ''
  - name: setLogger(Logger)
    uid: '@azure/msal-browser.ClientApplication.setLogger'
    package: '@azure/msal-browser'
    summary: >-
      Replaces the default logger set in configurations with new Logger with new
      configurations
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setLogger(logger: Logger)'
      parameters:
        - id: logger
          type: Logger
          description: Logger instance
  - name: setNavigationClient(INavigationClient)
    uid: '@azure/msal-browser.ClientApplication.setNavigationClient'
    package: '@azure/msal-browser'
    summary: Sets navigation client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setNavigationClient(navigationClient: INavigationClient)'
      parameters:
        - id: navigationClient
          type: <xref uid="@azure/msal-browser.INavigationClient" />
          description: ''
  - name: >-
      ssoSilent(Partial<Omit<CommonAuthorizationUrlRequest, "responseMode" |
      "codeChallenge" | "codeChallengeMethod" | "requestedClaimsHash" |
      "nativeBroker">>)
    uid: '@azure/msal-browser.ClientApplication.ssoSilent'
    package: '@azure/msal-browser'
    summary: >-
      This function uses a hidden iframe to fetch an authorization code from the
      eSTS. There are cases where this may not work:

      - Any browser using a form of Intelligent Tracking Prevention

      - If there is not an established session with the service


      In these cases, the request must be done inside a popup or full frame
      redirect.


      For the cases where interaction is required, you cannot send a request
      with prompt=none.


      If your refresh token has expired, you can use this function to fetch a
      new set of tokens silently as long as

      you session on the server still exists.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function ssoSilent(request: Partial<Omit<CommonAuthorizationUrlRequest,
        "responseMode" | "codeChallenge" | "codeChallengeMethod" |
        "requestedClaimsHash" | "nativeBroker">>): Promise<AuthenticationResult>
      parameters:
        - id: request
          type: >-
            Partial&lt;Omit&lt;CommonAuthorizationUrlRequest, "responseMode" |
            "codeChallenge" | "codeChallengeMethod" | "requestedClaimsHash" |
            "nativeBroker"&gt;&gt;
          description: <xref:@azure/msal-browser.SsoSilentRequest>
      return:
        description: >-
          A promise that is fulfilled when this function has completed, or
          rejected if an error was raised.
        type: Promise&lt;AuthenticationResult&gt;
